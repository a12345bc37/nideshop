{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/auth.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "loginAction",
        "username",
        "post",
        "password",
        "fail",
        "admin",
        "model",
        "where",
        "find",
        "think",
        "isEmpty",
        "md5",
        "password_salt",
        "id",
        "update",
        "last_login_time",
        "parseInt",
        "Date",
        "now",
        "last_login_ip",
        "ctx",
        "ip",
        "TokenSerivce",
        "service",
        "sessionKey",
        "create",
        "user_id",
        "userInfo",
        "avatar",
        "admin_role_id",
        "success",
        "token"
    ],
    "mappings": ";;AAAA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;;AAEAC,OAAOC,OAAP,GAAiB,cAAcH,IAAd,CAAmB;AAC5BI,aAAN,GAAoB;AAAA;;AAAA;AAClB,YAAMC,WAAW,MAAKC,IAAL,CAAU,UAAV,CAAjB;AACA,YAAMC,WAAW,MAAKD,IAAL,CAAU,UAAV,CAAjB;AACA,UAAID,aAAa,CAAjB,EAAoB;AAClB,eAAO,MAAKG,IAAL,CAAU,MAAV,CAAP;AACD;AACD,YAAMC,QAAQ,MAAM,MAAKC,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B,EAAEN,UAAUA,QAAZ,EAA1B,EAAkDO,IAAlD,EAApB;AACA,UAAIC,MAAMC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACxB,eAAO,MAAKD,IAAL,CAAU,GAAV,EAAe,WAAWK,MAAME,GAAN,CAAUR,WAAW,EAAX,GAAgBE,MAAMO,aAAhC,CAA1B,CAAP;AACD;;AAED,UAAIH,MAAME,GAAN,CAAUR,WAAW,EAAX,GAAgBE,MAAMO,aAAhC,MAAmDP,MAAMF,QAA7D,EAAuE;AACrE,eAAO,MAAKC,IAAL,CAAU,GAAV,EAAeK,MAAME,GAAN,CAAUR,WAAW,EAAX,GAAgBE,MAAMO,aAAhC,IAAiD,cAAjD,GAAkEP,MAAMF,QAAvF,CAAP;AACD;;AAED;AACA,YAAM,MAAKG,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B,EAAEM,IAAIR,MAAMQ,EAAZ,EAA1B,EAA4CC,MAA5C,CAAmD;AACvDC,yBAAiBC,SAASC,KAAKC,GAAL,KAAa,IAAtB,CADsC;AAEvDC,uBAAe,MAAKC,GAAL,CAASC;AAF+B,OAAnD,CAAN;;AAKA,YAAMC,eAAe,MAAKC,OAAL,CAAa,OAAb,EAAsB,OAAtB,CAArB;AACA,YAAMC,aAAa,MAAMF,aAAaG,MAAb,CAAoB;AAC3CC,iBAASrB,MAAMQ;AAD4B,OAApB,CAAzB;;AAIA,UAAIJ,MAAMC,OAAN,CAAcc,UAAd,CAAJ,EAA+B;AAC7B,eAAO,MAAKpB,IAAL,CAAU,MAAV,CAAP;AACD;;AAED,YAAMuB,WAAW;AACfd,YAAIR,MAAMQ,EADK;AAEfZ,kBAAUI,MAAMJ,QAFD;AAGf2B,gBAAQvB,MAAMuB,MAHC;AAIfC,uBAAexB,MAAMwB;AAJN,OAAjB;;AAOA,aAAO,MAAKC,OAAL,CAAa,EAAEC,OAAOP,UAAT,EAAqBG,UAAUA,QAA/B,EAAb,CAAP;AArCkB;AAsCnB;AAvCiC,CAApC",
    "file": "../../../src/admin/controller/auth.js",
    "sourcesContent": [
        "const Base = require('./base.js');\n\nmodule.exports = class extends Base {\n  async loginAction() {\n    const username = this.post('username');\n    const password = this.post('password');\n    if (username === 1) {\n      return this.fail('登录失败');\n    }\n    const admin = await this.model('admin').where({ username: username }).find();\n    if (think.isEmpty(admin)) {\n      return this.fail(401, '用户名不存在' + think.md5(password + '' + admin.password_salt));\n    }\n\n    if (think.md5(password + '' + admin.password_salt) !== admin.password) {\n      return this.fail(400, think.md5(password + '' + admin.password_salt) + ',用户名或密码不正确2，' + admin.password);\n    }\n\n    // 更新登录信息\n    await this.model('admin').where({ id: admin.id }).update({\n      last_login_time: parseInt(Date.now() / 1000),\n      last_login_ip: this.ctx.ip\n    });\n\n    const TokenSerivce = this.service('token', 'admin');\n    const sessionKey = await TokenSerivce.create({\n      user_id: admin.id\n    });\n\n    if (think.isEmpty(sessionKey)) {\n      return this.fail('登录失败');\n    }\n\n    const userInfo = {\n      id: admin.id,\n      username: admin.username,\n      avatar: admin.avatar,\n      admin_role_id: admin.admin_role_id\n    };\n\n    return this.success({ token: sessionKey, userInfo: userInfo });\n  }\n};\n"
    ]
}